<?php
namespace Application\Model;

use Application\Entity\Cliente;
use Application\Entity\Conta;
use Application\Entity\Usuario;
use Base\Service\SessionService;
use Doctrine\ORM\EntityManager;
use Zend\Hydrator\ClassMethods;
use Zend\Session\Container;
use Zend\Stdlib\Hydrator;

class ContaModel extends AbstractModel  {

    public function __construct(EntityManager $em){
        parent::__construct($em);
        $this->entity = 'Application\Entity\Conta';
    }

    public function insert($data)
    {
        $clienteArray = (new SessionService())->getUsuarioLogado();
        $data['ativo'] = 1;
        $data['cliente'] = $this->entityManager->getRepository('Application\Entity\Cliente')->find($clienteArray['id']);

        return parent::insert($data); // TODO: Change the autogenerated stub
    }

    public function depositar($valor, Conta $conta){
        if($valor > 0){
            $conta->setSaldo($conta->getSaldo() + $valor);

            $this->entityManager->persist($conta);
            $this->entityManager->flush();

            return true;
        }
        return false;
    }

    public function sacar($valor, Conta $conta){
        if($valor > 0 && $conta->getSaldo() > 0){
            $conta->setSaldo($conta->getSaldo() - $valor);

            $this->entityManager->persist($conta);
            $this->entityManager->flush();

            return true;
        }
        return false;
    }


    /**
     * @param Conta $origem
     * @param Conta $destino
     * @param $valor
     * @return int -1 valor de transferência insuficiente na conta de origem
     * @return int -2 valor de trasnferencia negativo
     * @return int 1 transferência efetuada
     */
    public function transferir(Conta $origem, Conta $destino, $valor){

        //Sem saldo para trasnferência
        if($origem->getSaldo() < $valor){
            return -1;
        }

        if($valor < 0){
            return -2;
        }

        $this->sacar($valor, $origem);
        $this->depositar($valor, $destino);

        return 1;
    }

}